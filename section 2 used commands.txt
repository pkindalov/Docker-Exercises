1.docker build .
2.docker run sha256:1b8efcfe223500a581ab7077cb6e6d71409a1076f376b08e9f9b011720e3d487
docker run -p 3000:3000 sha256:e9b3adb646af0498a6a89282c7e8dde24a9ae619513abcdc4cbd84d6e174eef7

3.docker ps / to get the name of container. In this case it is stupefied_babbage /
/ps - stands for processes/
docker ps - a will show all the containers. Including the stopped ones.

4.docker stop naughty_dirac

5.docker ps --help you will see all available config options for the command docker ps

6.docker start container_name  - restart stopped container. If there are no changes in the code
It is better to restart container with this command instead of docker run

docker run -it container_name - interactive..waiting to enter something.
docker start -a -i container_name - restart container in attach and interactive mode.

docker rm container_name - removes container but if it is stopped. If it is running then an error is thrown. It is possible to
remove more containers at one. Just must be separate with space each other. For example

docker rm container_name1 container_name2 container_name3 container_name4

docker images - show list with  all images we have

docker rmi - removes images. We can remove images only if they are not used from some container without matter if it
is stopped or not. Container must be removed first.

docker image prune - this command remove all unused images.
docker run -p 3000:80 -d --rm container_name (--rm flag in this case makes container automatically to be deleted when it is been stopped)

docker image inspect image_id(can be get when execute command docker images)  - give you information about the image

docker cp - it allows you to copy files or folders into a running container or out of a running container
docker cp source destination(will be created if it not exists)
example usages of docker cp command
(name of the container can be get using the command docker ps)

//the next commands puts all files form dummy directory in test directory located in the container
docker cp dummy/test.txt  container_name:/test. 
docker cp dummy/. container_name:/test

//the next command puts all files from test directory in container to the dummy directory located 
somewhere outside of the container.
docker cp container_name:/test dummy

//--name flag permits you to put a name of the container. For example
docker run -p 3000:80 -d --rm --name your_app_name container_id
after executing this command and run docker ps you must be able to see your_app_name in the name field of the
container

//you can assign name of the images too. The name of the image is called a tag. Images tags consists 2 parts
name (or repository of your image) : tag

//With the name you can set a general name of your image. For example node
//With tag you can put a more specialized version of that image. For example 14
Example using of the command:
docker build  -t goals:latest .

//it is possible to rename an image with the command tag. It makes a clone with the new name of the existing image. The old one continue to exists. Another way is to build again the image with the new name

docker tag oldName newName. For example
docker tag node-demo:latest academind/node-hello-world



IMPORTANT

docker run - you create a new container based on the image every time. Also, this command
is BLOCKING THE TERMINAL. Attach(means that we are listening to the output of that container. For example what is printed to the console.) mode is the default.

 It can be start on detach mode through the -d parameter. For example:
docker run -d container_name.

We can attach to the container again through the command attach. For example
docker attach container_name 

docker start - NOT BLOCKING THE TERMINAL. Detach mode is by default.

docker logs container_logs - show to us past logs that were printed by that container
docker logs -f container_name we can attach again to the container
