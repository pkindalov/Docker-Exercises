docker build -t favorites-node .
docker run --name favorites --rm -d -p 3000:3000 favorites-nodes
docker run --name favorites --rm -p 3000:3000 favorites-nodes
docker stop favorites

//host.docker.internal - can be used where you need a domain in docker. It is transforming to
//IP address by docker
localhost == host.docker.internal

docker run -d --name mongodb mongo

//with the following command we can see IP of the container and use it to connect it with
//other containers.

docker container inspect mongoldb 

//after execute this command you must see something like that

 "Ports": {
                "27017/tcp": null
            },
            "SandboxKey": "/var/run/docker/netns/19ce0468be44",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "5d86dcf887c0dbe2394cbc949b1b2a01d6aa7d9b229f9dd894769cd1582e50c4",
            "Gateway": "172.17.0.1",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "172.17.0.2",
            "IPPrefixLen": 16,
            "IPv6Gateway": "",
            "MacAddress": "02:42:ac:11:00:02",
            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,

docker build -t favourites-node .
docker run --name favorites -d --rm -p 3000:3000 favorites-node
docker ps


docker run -d --name mongodb --network favourites-net mongo
docker stop mongoldb
docker container prune

//Unlike the volumes, docker will NOT create network automatically. Instead, you must create network
//on your own
docker run -d --name mongodb --network favorites-net mongo
8e74f5b416029c5613116d46e139d971ff467dbc2acd97a5ab5d3710027535b6

docker: Error response from daemon: network favorites-net not found.

docker rm mongoldb

docker network --help
docker network create favourites-net
docker network ls //to see all available network
docker run -d --name mongodb --network favorites-net mongo

"mongodb://mongodb:27017/swfavorites" 

//here from part mongodb:27017, mongodb is a name of the container
//this will work if the containers are part of the same network

docker build -t favorites-node .
docker run --name favorites --network favorites-net -d --rm -p 3000:3000 favorites-node


//IMPORTANT
//request to the web servers etc... in containers are always possible
//request to the localhost must use host.docker.internal
//cross container request - looking for ip on the container with docker container inspect container_name or even better if create a network and then just use container name